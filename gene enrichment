# Set the file path for count data
countdata_mb_path <- "C:/Users/bop21gwh/Documents/PhD work/genomics/Hisat2/hisat2_mb.txt"

# Read the count data from a tab-separated text file
countdata_mb <- read.table(countdata_mb_path, header = TRUE, sep = "\t")

# Remove unnecessary columns (2 to 8)
countdata_mb_filtered <- countdata_mb[, -c(2:8)]

# Set row names to the gene IDs from the first column of countdata_mb_filtered
rownames(countdata_mb_filtered) <- countdata_mb_filtered$Geneid

# Set the file path for metadata
metadata_path <- "C:/Users/bop21gwh/Documents/PhD work/genomics/Hisat2/metadata.csv"

# Read the metadata from a CSV file
metadata <- read.csv(metadata_path)

# Filter metadata to exclude "H.m" species
metadata_filtered <- metadata[metadata$Species != "H.m", ]

# Create DESeq2 dataset
dds <- DESeqDataSetFromMatrix(
  countData = round(countdata_mb_filtered[, -1]),  # Remove 'Geneid' column for count matrix
  colData = metadata_filtered,
  design = ~ Tissue + Condition  # Adjust the design as needed
)

# Perform differential expression analysis
dds <- DESeq(dds)

# Extract results for a specific contrast (adjust the contrast based on your data)
res <- results(dds, contrast = c('Tissue', 'No_ants_Warty', 'No_ants_Smooth'))

# Perform variance stabilizing transformation (VST)
vsd <- vst(dds, blind = FALSE)

# Set the file path for the GTF file
gtf_file_path <- "C:/Users/bop21gwh/Documents/PhD work/genomics/Hisat2/cleaned_m.b_annotation.gtf"

# Load the GTF file
txdb <- makeTxDbFromGFF(gtf_file_path, format="gtf")

# Map gene symbols from the GTF file to the DESeq2 results
res$symbol <- mapIds(txdb, keys=row.names(res), column="GENEID", keytype="GENEID", multiVals="first")

# Combine DESeq2 results with BLAST results by matching "Geneid" with "Query" in BLAST
merged_results <- merge(as.data.frame(res), blast_results, by.x="row.names", by.y="Query", all.x=TRUE)

# View the combined results
head(merged_results)



# Set the path to the BLAST results file
blast_results_path <- "C:/Users/bop21gwh/Documents/PhD work/genomics/Hisat2/blast_ATH_Mb_out.txt"

# Read the BLAST results into a data frame
blast_results <- read.table(blast_results_path, header = FALSE, sep = "\t")
head(blast_results)
# Add column names to the BLAST results data frame
colnames(blast_results) <- c("Query", "Subject", "Perc_Identity", "Alignment_Length", "Mismatches", 
                             "Gap_Opens", "Query_Start", "Query_End", "Subject_Start", 
                             "Subject_End", "E_value", "Bit_score")

# View the first few rows of the BLAST results
head(blast_results)


# Remove the .1 or any other numeric suffix preceded by a period
blast_results$Query <- sub("\\.\\d+$", "", blast_results$Query)

# Now, try merging again
merged_results <- merge(as.data.frame(res), blast_results, by.x="Row.names", by.y="Query", all.x=TRUE)

# View the merged results
head(merged_results)

colnames(merged_results)



if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("org.At.tair.db")

# Load the org.At.tair.db package
library(org.At.tair.db)

# Check the class of the object
class(org.At.tair.db)
a

# See what kind of data you can retrieve (TAIR IDs, Gene Symbols, etc.)
columns(org.At.tair.db)


# List all installed packages
installed_packages <- installed.packages()
print(installed_packages[, "Package"])

# Check if org.At.tair.db is in the list
if ("org.At.tair.db" %in% installed_packages[, "Package"]) {
  message("Package org.At.tair.db is installed.")
} else {
  message("Package org.At.tair.db is NOT installed.")
}

# Load necessary libraries
library(AnnotationDbi)
library(org.At.tair.db)

# Load the required packages
library(org.At.tair.db)
library(dplyr)

# Example merged_results data frame (replace this with your actual data)
# merged_results <- data.frame(Subject = c("Symbol1", "Symbol2", "Symbol3", ...))

# Step 1: Extract unique symbols from the "Subject" column in merged_results
unique_subject <- unique(merged_results$Subject)
head(unique_subject)

# Step 2: Retrieve all gene symbols available in org.At.tair.db
available_symbols <- keys(org.At.tair.db, keytype = "SYMBOL")
head(available_symbols)

# Step 3: Find matches between your unique symbols and the available Arabidopsis symbols
matched_symbols <- unique_subject[unique_subject %in% available_symbols]
head(matched_symbols)

# Step 4: Get additional information for matched symbols
if (length(matched_symbols) > 0) {
  gene_info <- select(org.At.tair.db, 
                      keys = matched_symbols, 
                      columns = c("TAIR", "GENENAME"), 
                      keytype = "SYMBOL")
  
  # Merge with merged_results to include additional information (e.g., TAIR, GENENAME)
  matched_results <- merge(merged_results, gene_info, by.x = "Subject", by.y = "SYMBOL", all.x = TRUE)
  
  # View the matched results
  head(matched_results)
} else {
  message("No matched symbols found.")
}


########################################

# Check the class of the org.At.tair.db object
print(class(org.At.tair.db))

# Step 1: Retrieve available symbols from the org.At.tair.db
available_symbols <- keys(org.At.tair.db, keytype = "SYMBOL")
print(head(available_symbols, 10))  # Print the first 10 available symbols

# Step 2: Inspect the columns available in the database
available_columns <- columns(org.At.tair.db)
print(available_columns)

# Step 3: Recheck unique symbols and convert to uppercase
unique_symbols <- unique(merged_results$symbol)
unique_symbols_trimmed <- gsub("^\\s+|\\s+$", "", toupper(unique_symbols))

# Step 4: Find matches again
matched_symbols <- unique_symbols_trimmed[unique_symbols_trimmed %in% available_symbols]

# Optional: Get additional information for matched symbols
if (length(matched_symbols) > 0) {
  gene_info <- select(org.At.tair.db, 
                      keys = matched_symbols, 
                      columns = c("TAIR", "GENENAME"), 
                      keytype = "SYMBOL")
  
  # Merge with merged_results to see the matches
  matched_results <- merge(merged_results, gene_info, by.x = "symbol", by.y = "SYMBOL", all.x = TRUE)
  
  # View the matched results
  head(matched_results)
} else {
  message("No matched symbols found.")
}


##################################
# Install BiocManager if you don't have it
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

# Install biomaRt package
BiocManager::install("biomaRt")

# Load the biomaRt package
library(biomaRt)

# Use biomaRt to connect to the Ensembl database
ensembl <- useEnsembl(biomart = "proteins", dataset = "athaliana_proteins")

BiocManager::install('grimbough/biomaRt')
# Use biomaRt to connect to the UniProt database
uniprot <- useMart("uniprot")

############################################################################
# Install required packages if not already installed
if (!requireNamespace("biomaRt", quietly = TRUE)) {
  install.packages("biomaRt")
}

# Load the required libraries
library(biomaRt)
library(dplyr)

# Assuming merged_results is your data frame and it has a column 'Subject' with UniProt IDs
# Example merged_results data frame (use your actual data frame)
# merged_results <- data.frame(Subject = c("Q9SAI4", "Q8W036", "A0A1P8BA67", "Q9SV84", "A0A1P8AWV8", "Q8W037"))

# Step 1: Connect to the Ensembl Plants database
ensembl_plants <- useMart(biomart = "plants_mart", 
                          dataset = "athaliana_eg_gene", 
                          host = "https://plants.ensembl.org")

# Step 2: Extract unique UniProt IDs from the "Subject" column in merged_results
unique_subject <- unique(merged_results$Subject)
head(unique_subject)  # To check the UniProt IDs

# Step 3: Retrieve gene symbols and additional info corresponding to your UniProt IDs
# Use the getBM function to query the biomaRt database
gene_info <- getBM(attributes = c("uniprot_swissprot_accession", "tair_symbol", "description"), 
                   filters = "uniprot_swissprot_accession", 
                   values = unique_subject, 
                   mart = ensembl_plants)

# Step 4: Merge the retrieved gene info with your merged_results data frame
matched_results <- merge(merged_results, gene_info, 
                         by.x = "Subject", 
                         by.y = "uniprot_swissprot_accession", 
                         all.x = TRUE)

# View the matched results
head(matched_results)

# Optional: Save the results to a file
write.csv(matched_results, "matched_results.csv", row.names = FALSE)

# Print a message to indicate completion
message("Matching complete and results saved to 'matched_results.csv'.")


# List all available attributes for the dataset you're using in Ensembl Plants
attributes <- listAttributes(ensembl_plants)

# View the first few attributes (optional, to avoid displaying the entire list at once)
head(attributes)

# If you want to search for attributes related to UniProt or symbols, you can filter:
# Example: Searching for UniProt-related attributes
attributes[grep("uniprot", attributes$name, ignore.case = TRUE), ]

# Example: Searching for symbol-related attributes
attributes[grep("symbol", attributes$name, ignore.case = TRUE), ]

###################################################### correct database

# Example of retrieving TAIR Gene Symbols and UniProtKB/Swiss-Prot IDs
gene_info <- getBM(
  attributes = c("uniprotswissprot", "tair_symbol", "description"), 
  filters = "uniprotswissprot", 
  values = unique_subject, 
  mart = ensembl_plants
)

# View the first few rows of the retrieved data
head(gene_info)

# Merge gene_info with the original merged_results based on the UniProt IDs
merged_results_final <- merge(merged_results, gene_info, by.x = "Subject", by.y = "uniprotswissprot", all.x = TRUE)

# View the first few rows of the final merged data
head(merged_results_final)


# Inspect the first few rows of both data sets
head(merged_results$Subject)
head(gene_info$uniprotswissprot)

# Find the matching rows where Subject matches uniprotswissprot
matched_rows <- merged_results$Subject %in% gene_info$uniprotswissprot
print(matched_rows)

# Display the matched rows
matched_subjects <- merged_results[matched_rows, ]
head(matched_subjects)

# Merge the two data frames based on Subject and uniprotswissprot
merged_results_with_gene_info <- merge(merged_results, gene_info, 
                                       by.x = "Subject", 
                                       by.y = "uniprotswissprot", 
                                       all.x = TRUE)

# View the first few rows of the merged data
head(merged_results_with_gene_info)


# Count the number of matches (where tair_symbol is not NA)
num_matches <- sum(!is.na(merged_results_with_gene_info$tair_symbol))
num_matches

#### all gene enrichment code #####################################

# Load required libraries
library(biomaRt)
library(clusterProfiler)
library(org.At.tair.db)
library(DOSE) # Required for enrichGO and enrichKEGG functions

# Correct database
# Example of retrieving TAIR Gene Symbols and UniProtKB/Swiss-Prot IDs
gene_info <- getBM(
  attributes = c("uniprotswissprot", "tair_symbol", "description"), 
  filters = "uniprotswissprot", 
  values = unique_subject, 
  mart = ensembl_plants
)

# View the first few rows of the retrieved data
head(gene_info)
colnames(print(gene_info))

# Merge gene_info with the original merged_results based on the UniProt IDs
merged_results_final <- merge(merged_results, gene_info, by.x = "Subject", by.y = "uniprotswissprot", all.x = TRUE)
head(merged_results_final)
# View the first few rows of the final merged data
head(merged_results_final)
############### check if the no of genes = go terms from the Subject column
# Count unique Row.names
num_unique_row_names <- length(unique(merged_results_with_gene_info$Row.names))
cat("Number of unique Row.names:", num_unique_row_names, "\n")

# Count unique symbols
num_unique_symbols <- length(unique(merged_results_with_gene_info$symbol))
cat("Number of unique symbols:", num_unique_symbols, "\n")
############################## quality control of Subject matches to both uniswissprot and tair_symbol ids
# Check for matches between Subject and uniprotswissprot
matched_uniprot <- merged_results$Subject %in% gene_info$uniprotswissprot

# Count the number of matches for uniprotswissprot
num_matched_uniprot <- sum(matched_uniprot)

# Print the number of matches for uniprotswissprot
print(paste("Number of matches with uniprotswissprot:", num_matched_uniprot))

# Check for matches between Subject and tair_symbol
matched_tair_symbol <- merged_results$Subject %in% gene_info$tair_symbol

# Count the number of matches for tair_symbol
num_matched_tair_symbol <- sum(matched_tair_symbol)

# Print the number of matches for tair_symbol
print(paste("Number of matches with tair_symbol:", num_matched_tair_symbol))

# Optionally, you can display the matched rows for both comparisons
matched_uniprot_rows <- merged_results[matched_uniprot, ]
matched_tair_symbol_rows <- merged_results[matched_tair_symbol, ]

# View the first few matched rows for uniprotswissprot
head(matched_uniprot_rows)

# View the first few matched rows for tair_symbol
head(matched_tair_symbol_rows)
#################################


install.packages("biomaRt") ######################### left oof from here

library(biomaRt)

# Try connecting to Ensembl Genomes
mart <- useMart("ENSEMBL_MART_GENOMES", host = "https://ensemblgenomes.org")


mart <- useMart("plants_mart", host = "https://plants.ensembl.org")
datasets <- listDatasets(mart)
print(datasets)
##################################################
# Install clusterProfiler if not already installed
if (!requireNamespace("", quietly = TRUE)) {
  install.packages("BiocManager")
  BiocManager::install("clusterProfiler")
}

# Load the library
library(clusterProfiler)
install.packages("UniprotR")
library(UniprotR)

# Assuming you have UniProt IDs in the 'Subject' column of your dataframe
uniprot_ids <- merged_results$Subject

# Check the first few IDs to make sure they're correct
head(uniprot_ids)

# Run KEGG enrichment using the Enrichment.KEGG function
Enrichment.KEGG(Accs = uniprot_ids, 
                OS = "athaliana",    # For Arabidopsis
                p_value = 0.05,      # Custom p-value threshold for significance
                directorypath = "your/output/path",  # Optional: specify a path to save output
                top = 10)            # Visualize the top 10 enriched terms




No









########################

BiocManager::install("clusterProfiler")

# Load clusterProfiler
library(clusterProfiler)

# Assume 'matched_uniprot_rows' contains the UniProt IDs in 'Subject' column
uniprot_ids <- matched_uniprot_rows$Subject

# Perform GO enrichment
go_enrichment <- enrichGO(gene         = uniprot_ids,
                          OrgDb        = org.At.tair.db, # If you are using Arabidopsis TAIR db
                          keyType      = "UNIPROT",
                          ont          = "BP",           # BP = Biological Process, also "CC" or "MF"
                          pAdjustMethod = "BH",
                          pvalueCutoff = 0.01,
                          qvalueCutoff = 0.05)

# View enrichment results
head(go_enrichment)


# Load required libraries
library(org.At.tair.db)
library(AnnotationDbi)

# Check the key types supported by the org.At.tair.db
supported_keytypes <- keytypes(org.At.tair.db)
print(supported_keytypes)



###############################
# Inspect the first few rows of both data sets
head(merged_results$Subject)
head(gene_info$uniprotswissprot)

# Find the matching rows where Subject matches uniprotswissprot
matched_rows <- merged_results$Subject %in% gene_info$uniprotswissprot
print(matched_rows)

# Display the matched rows
matched_subjects <- merged_results[matched_rows, ]
head(matched_subjects)

# Merge the two data frames based on Subject and uniprotswissprot
merged_results_with_gene_info <- merge(merged_results, gene_info, 
                                       by.x = "Subject", 
                                       by.y = "uniprotswissprot", 
                                       all.x = TRUE)

# View the first few rows of the merged data
head(merged_results_with_gene_info)

# Count the number of matches (where tair_symbol is not NA)
num_matches <- sum(!is.na(merged_results_with_gene_info$tair_symbol))
print(paste("Number of matches:", num_matches))
head(num_matches)
# Prepare gene list for enrichment analysis
gene_list <- na.omit(merged_results_with_gene_info$uniprotswissprot)

#######
# Count the number of unique Subjects in the merged_results dataframe
num_unique_subjects <- length(unique(merged_results$Subject))

# Print the number of unique Subjects
print(paste("Number of unique Subjects:", num_unique_subjects))




