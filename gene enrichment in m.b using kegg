# Load required libraries
library(DESeq2)
library(GenomicFeatures)
library(biomaRt)
library(clusterProfiler)
library(UniprotR)

# Set file paths
countdata_mb_path <- "C:/Users/bop21gwh/Documents/PhD work/genomics/Hisat2/hisat2_mb.txt"
metadata_path <- "C:/Users/bop21gwh/Documents/PhD work/genomics/Hisat2/metadata.csv"
gtf_file_path <- "C:/Users/bop21gwh/Documents/PhD work/genomics/Hisat2/cleaned_m.b_annotation.gtf"
blast_results_path <- "C:/Users/bop21gwh/Documents/PhD work/genomics/Hisat2/blast_ATH_Mb_out.txt"

# Step 1: Load count data and metadata
countdata_mb <- read.table(countdata_mb_path, header = TRUE, sep = "\t")
countdata_mb_filtered <- countdata_mb[, -c(2:8)]  # Remove unnecessary columns
rownames(countdata_mb_filtered) <- countdata_mb_filtered$Geneid

metadata <- read.csv(metadata_path)
metadata_filtered <- metadata[metadata$Species != "H.m", ]  # Filter metadata

# Step 2: Create DESeq2 dataset and perform DE analysis
dds <- DESeqDataSetFromMatrix(
  countData = round(countdata_mb_filtered[, -1]),  # Exclude 'Geneid' column
  colData = metadata_filtered,
  design = ~ Tissue
)
dds <- DESeq(dds)
res <- results(dds, contrast = c('Tissue', 'No_ants_Warty', 'No_ants_Smooth'))

# Step 3: Load GTF file and map gene symbols
txdb <- makeTxDbFromGFF(gtf_file_path, format = "gtf")
res$symbol <- mapIds(txdb, keys = row.names(res), column = "GENEID", keytype = "GENEID", multiVals = "first")

# Step 4: Load BLAST results and merge with DESeq2 results
blast_results <- read.table(blast_results_path, header = FALSE, sep = "\t")
colnames(blast_results) <- c("Query", "Subject", "Perc_Identity", "Alignment_Length", "Mismatches", 
                             "Gap_Opens", "Query_Start", "Query_End", "Subject_Start", 
                             "Subject_End", "E_value", "Bit_score")

blast_results$Query <- sub("\\.\\d+$", "", blast_results$Query)  # Clean gene IDs
merged_results <- merge(as.data.frame(res), blast_results, by.x = "row.names", by.y = "Query", all.x = TRUE)

head(merged_results)
# Step 5: Retrieve TAIR Gene Symbols and UniProtKB/Swiss-Prot IDs using biomaRt
ensembl_plants <- useMart("plants_mart", host = "https://plants.ensembl.org")
unique_subjects <- unique(merged_results$Subject)

# Connect to Ensembl Plants mart
ensembl_plants <- useMart("plants_mart", host = "https://plants.ensembl.org")

# List available datasets in the Ensembl Plants mart
datasets <- listDatasets(ensembl_plants)
print(datasets)  # This will show all available datasets

# Select the appropriate dataset (for Arabidopsis thaliana, usually "athaliana_eg_gene")
ensembl_plants <- useDataset("athaliana_eg_gene", mart = ensembl_plants)

head(ensembl_plants)
# Retrieve TAIR Gene Symbols and UniProtKB/Swiss-Prot IDs
gene_info <- getBM(
  attributes = c("uniprotswissprot", "tair_symbol", "description"), 
  filters = "uniprotswissprot", 
  values = unique_subjects, 
  mart = ensembl_plants
)

# View the first few rows of the retrieved data
head(gene_info)
#################################################### Correct line
# Inspect the first few rows of both data sets
head(merged_results$Subject)
head(gene_info$uniprotswissprot)

# Find the matching rows where Subject matches uniprotswissprot
matched_rows <- merged_results$Subject %in% gene_info$uniprotswissprot
print(matched_rows)

# Display the matched rows
matched_subjects <- merged_results[matched_rows, ]
head(matched_subjects)

# Merge the two data frames based on Subject and uniprotswissprot
merged_results_with_gene_info <- merge(merged_results, gene_info, 
                                       by.x = "Subject", 
                                       by.y = "uniprotswissprot", 
                                       all.x = TRUE)

# View the first few rows of the merged data
head(merged_results_with_gene_info)

# Count the number of matches (where tair_symbol is not NA)
num_matches <- sum(!is.na(merged_results_with_gene_info$tair_symbol))
print(paste("Number of matches:", num_matches))
head(num_matches)
# Prepare gene list for enrichment analysis
gene_list <- na.omit(merged_results_with_gene_info$uniprotswissprot)

No

########################### Correct line Enrichment analysis ###############
# Assuming you have UniProt IDs in the 'Subject' column of your dataframe
uniprot_ids <- merged_results$Subject

# Check the first few IDs to make sure they're correct
head(uniprot_ids)

# Run KEGG enrichment using the Enrichment.KEGG function
Enrichment.KEGG(Accs = uniprot_ids, 
                OS = "athaliana",    # For Arabidopsis
                p_value = 0.05,      # Custom p-value threshold for significance
                directorypath = "your/output/path",  # Optional: specify a path to save output
                top = 10)            # Visualize the top 10 enriched terms

